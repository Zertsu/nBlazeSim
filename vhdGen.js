"use strict";

class vhdGen {
    static #template = undefined

    static async #getTemplate() {
        const response = await fetch("ROM_form.vhd")
        const data = await response.text()
        this.#template = data
    }

    static* #bytecodeReader(bytecode, index, msb, lsb) {
        while (true) {
            let v = (bytecode[index++] >> lsb) % (1 << (msb + 1))
            yield v === undefined ? 0 : v
        }
    }

    static #genLine(bytecode, startIndex, msb, lsb) {
        const w = msb - lsb + 1
        const instPerLine = 64 * 4 / w
        startIndex *= instPerLine
        const gen = this.#bytecodeReader(bytecode, startIndex, msb, lsb)
        let o = ""
        if (w >= 4) {
            // One instruction needs multiple digits
            const c = w / 4
            while (o.length != 64) {
                let q = gen.next().value
                for (let i = 0; i < c; i++) {
                    o = (q & 0xF).toString(16) + o
                    q >>= c
                }
            }
        } else {
            // One digit contains multiple instructions
            while (o.length != 64) {
                let ch = 0
                for (let i = 0; i < w; i++) {
                    ch |= gen.next().value << i * w
                }
                o = ch.toString(16) + o
            }
        }
        return o.toUpperCase()
    }

    static async genVHD(prog) {
        if (vhdGen.#template == undefined) {
            await this.#getTemplate()
        }
        let o = vhdGen.#template.split("{begin template}").slice(-1)[0]
        o = o.replaceAll("{psmname}", "<stdin>")
            .replaceAll("Generated by KCPSM6 Assembler", "Generated by nBlazeSim")
            .replaceAll("{timestamp}", new Date().toISOString())
            .replaceAll("{name}", "prog_memory")

        o = o.replaceAll(/\{(\[(\d+):(\d+)\]_)?INIT(P)?_(.{2})\}/g, (m, c1, c2, c3, c4, c5) => {
            if (c4 == undefined) {
                if (c1 == undefined) {
                    return this.#genLine(prog.bytecode, parseInt(c5, 16), 15, 0)
                } else {
                    // Not dealing with split memory yet
                    return "0".repeat(64)
                }
            } else {
                // Parity data
                if (c1 == undefined) {
                    return this.#genLine(prog.bytecode, parseInt(c5, 16), 17, 16)
                } else {
                    // Not dealing with split memory yet
                    return "0".repeat(64)
                }
            }
        })
        return o
    }

    static downlaodFile(filename, data) {
        let a = document.createElement('a')
        a.href = 'data:attachment/text,' + encodeURI(data)
        a.target = '_blank'
        a.download = filename
        a.click();
      }     
}
