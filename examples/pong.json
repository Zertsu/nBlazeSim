{"nBlazeSimVer":3,"arch":"kp6","archopts":{"scratch_pad_memory_size":64,"interrupt_vector":1023,"hwbuild":0},"src":"; Pong?\n\n; ======== Ports ==============\n; w0 - [3:0] LEDs\n; w2 - [7:0] LCD Data\n; w3 - [7:0] LCD Command\n; r1 - [7:0] KB scancode\n; r2 -   [0] LCD busy\n; r3 - [7:0] ms counter\n\n; ======== Register names =====\nNAMEREG sF, tmp\nNAMEREG s4, tmp2\nNAMEREG s3, tmp3\nNAMEREG s1, tmp4\n; General tmp\n\nNAMEREG sE, tmr\n; Timer reg\n\nNAMEREG sD, lcdd\n; LCD data reg\n\nNAMEREG s2, bOldC\n; Previous ball cell\n\nNAMEREG sA, btns\n; [0] - left up\n; [1] - left down\n; [2] - right up\n; [3] - right down\n\nNAMEREG sB, lpos\nNAMEREG sC, rpos\n; Left and right\n; paddle pos\n\nNAMEREG s8, bxpos\nNAMEREG s9, bypos\n; Ball position\n\nNAMEREG s7, bvel\n; [0] - 0: up, 1: down\n; [1] - 0: left, 1: right\n\nNAMEREG s6, lscore\nNAMEREG s5, rscore\n; Player scores\n\nNAMEREG s0, B_scode\nNAMEREG s1, B_pscode\nNAMEREG s2, B_tmp\n; Interrupt handler registers\n\n; =============================\n\n\n; ======== Init ===============\nENINTERR\n; Init wait\nLOAD tmr, 20\nCALL waitTmr\n\n; Soft reset\nsrst:\nCALL initLCD\n\n; Init game\ninitGM:\n; Check score overflow\nCOMPARE lscore, 0d100\nCALL Z, zscorl\nCOMPARE rscore, 0d100\nCALL z, zscorr\n\n; Reset paddles\nLOAD lpos, 0\nLOAD rpos, 0\n\n; Reset ball last pos\nLOAD bOldC, 0x83\n\n; Write left score\nLOAD lcdd, 0x80\nCALL sLCDC\nLOAD lcdd, lscore\nCALL rd_num\n\n; Write top-left paddle\nLOAD lcdd, 0x00\nCALL sLCDD\n\n; Write top empty space\nLOAD lcdd, ' '\nLOAD tmp2, 0d10\nCALL rd_x\n\n; Write top-right paddle\nLOAD lcdd, 0x02\nCALL sLCDD\n\n; Write right score\nLOAD lcdd, rscore\nCALL rd_num\n\n; Write bot-left paddle\nLOAD lcdd, 0xC2\nCALL sLCDC\nLOAD lcdd, 0x01\nCALL sLCDD\n\n; Write bot empty space\nLOAD lcdd, ' '\nLOAD tmp2, 0d10\nCALL rd_x\n\n; Write bot-right paddle\nLOAD lcdd, 0x03\nCALL sLCDD\n\n; Init ball direction and timer\nINPUT tmr, 3\nLOAD bvel, tmr\nAND bvel, 0x03\n\n; Init ball pos\nLOAD bypos, 7\nLOAD bxpos, 0d24\n\n; Init paddles\nLOAD lcdd, 0x40\nCALL sLCDC\nLOAD lcdd, 1\nLOAD tmp2, 6\nCALL rd_x\nLOAD lcdd, 0\nLOAD tmp2, 0d10\nCALL rd_x\nLOAD lcdd, 0x10\nLOAD tmp2, 6\nCALL rd_x\nLOAD lcdd, 0\nLOAD tmp2, 10\nCALL rd_x\n\n; ======== Loop ===============\nloop:\n; Output button states\nOUTPUT btns, 0\n\n; Move paddles\n; Left\nTEST btns, 3\nJUMP NC, l_s1\nTEST btns, 1\nSUBCY lpos, 0\nADDCY lpos, 0\nTEST btns, 2\nADDCY lpos, 0\nCOMPARE lpos, 0d11\nCALL Z, lposm\nl_s1:\n\n; Right\nTEST btns, C\nJUMP NC, l_s2\nTEST btns, 4\nSUBCY rpos, 0\nADDCY rpos, 0\nTEST btns, 8\nADDCY rpos, 0\nCOMPARE rpos, 0d11\nCALL Z, rposm\nl_s2:\n\n; Move ball\n\n; Move left/right\nTEST bvel, 2\nJUMP C, l_bright\nSUB bxpos, 1\nJUMP Z, lhhan\nJUMP l_bxskp\nl_bright:\nADD bxpos, 1\nCOMPARE bxpos, 0d49\nJUMP Z, rhhan\n\nl_bxskp:\n; Move up/down\nTEST bvel, 1\nJUMP C, l_bdown\nSUB bypos, 1\nCALL C, bycpos\nJUMP l_byskp\nl_bdown:\nADD bypos, 1\nCOMPARE bypos, 0d16\nCALL Z, bycneg\nl_byskp:\n\n; Render?\n\n; Left paddle\nLOAD lcdd, 0x40\nLOAD tmp2, lpos\nLOAD tmp3, 0x01\nCALL rd_pad\n; Right paddle\nLOAD lcdd, 0x50\nLOAD tmp2, rpos\nLOAD tmp3, 0x10\nCALL rd_pad\n\n; Ball\n; JUMP rd_bdone\nLOAD tmp, 83\n; Get char Y cell\nCOMPARE bypos, 8\nCALL NC, tmp0xC3\n\n; Get char X cell&pix\nLOAD tmp3, bxpos\nLOAD tmp4, 0\nrd_bd1:\nADD tmp4, 1\nSUB tmp3, 5\nJUMP NC, rd_bd1\nADD tmp3, 5\nSUB tmp4, 1\n\n; Check char change\nADD tmp, tmp4\nCOMPARE tmp, bOldC\nJUMP Z, rd_bcskp\n; Clear old char and set flag for new\nLOAD tmp2, tmp\nLOAD lcdd, bOldC\nCALL sLCDC\nLOAD lcdd, ' '\nCALL sLCDD\nLOAD bOldC, tmp2\nAND bOldC, 0xEF\nrd_bcskp:\n\n\n; Get b char line\nLOAD tmp2, 0x10\nrd_bcll:\nRR tmp2\nSUB tmp3, 1\nJUMP NC, rd_bcll\nRL tmp2\n\n; Bet ball line\nLOAD tmp3, bypos\nAND tmp3, 0x7\n\n; Write ball lines\n; tmp3 ypox, tmp2 line\nLOAD lcdd, 0x60\nCALL sLCDC\nLOAD tmp4, 0\nrd_bwl:\nLOAD lcdd, 0\nCOMPARE tmp4, tmp3\nCALL Z, ddtmp2\nCALL sLCDD\nCOMPARE tmp4, 8\nJUMP Z, rd_bdone\nADD tmp4, 1\nJUMP rd_bwl\nrd_bdone:\n\n; Write ball char if needed\nTEST bOldC, 0x80\nJUMP Z, rb_done2\nOR bOldC, 0x80\nLOAD lcdd, bOldC\nCALL sLCDC\nLOAD lcdd, 4\nCALL sLCDD\n\nrb_done2:\n; Wait for timer\nADD tmr, 0d100\nCALL waitTmr\n\nJUMP loop\n; =============================\n\n\n; ======== Render helpers =====\nrd_pad:\nCOMPARE tmp2, 0\nJUMP Z, rd_pad1\nSUB tmp2, 1\nADD lcdd, tmp2\nCALL sLCDC\nLOAD lcdd, 0\nCALL sLCDD\nJUMP rd_pad2\nrd_pad1:\nCALL sLCDC\nrd_pad2:\nLOAD lcdd, tmp3\nCALL sLCDD\nCALL sLCDD\nCALL sLCDD\nCALL sLCDD\nCALL sLCDD\nCALL sLCDD\nLOAD lcdd, 0\nCALL sLCDD\nRETURN\n\n\nrd_num:\nLOAD tmp2, lcdd\nCOMPARE tmp2, 0d10\nJUMP C, rd_n0s\nLOAD lcdd, 0\nrd_nl:\nADD lcdd, 1\nSUB tmp2, 0d10\nCOMPARE tmp2, 0d10\nJUMP NC, rd_nl\nCALL rd_schr\nLOAD lcdd, tmp2\nJUMP rd_schr\n\nrd_n0s:\nLOAD lcdd, '0'\nCALL sLCDD\nLOAD lcdd, tmp2\n\nrd_schr:\nADD lcdd, 0x30\nCALL sLCDD\nRETURN\n\nrd_x:\nCALL sLCDD\nSUB tmp2, 1\nJUMP NZ, rd_x\nRETURN\n\n; =============================\n\n\n; Paddle collision detection\n; Left\nlhhan:\nLOAD tmp, bypos\nSUB tmp, lpos\nJUMP C, misshan\nCOMPARE tmp, 5\nJUMP NC, misshan\nOR bvel, 2\nJUMP l_bxskp\n\n; Right\nrhhan:\nLOAD tmp, bypos\nSUB tmp, rpos\nJUMP C, misshan\nCOMPARE tmp, 5\nJUMP NC, misshan\nAND bvel, 0xFD\nJUMP l_bxskp\n\n; Miss handlers\nmisshan:\nCOMPARE bxpos, 0d10\nJUMP C, rpinc\nADD lscore, 1\nJUMP initGM\n\nrpinc:\nADD rscore, 1\nJUMP initGM\n\n; Helper functions\nlposm: LOAD&RETURN lpos, 0d10\nrposm: LOAD&RETURN rpos, 0d10\n\nzscorl: LOAD&RETURN lscore, 0\nzscorr: LOAD&RETURN rscore, 0\n\ntmp0xC3: LOAD&RETURN tmp, 0xC3\n\nddtmp2:\nLOAD lcdd, tmp2\nRETURN\n\nbycpos:\nOR bvel, 1\nLOAD&RETURN bypos, 1\nbycneg:\nAND bvel, 0xFE\nLOAD&RETURN bypos, 0xE\n\ninitLCD:\nCALL waitLCD\nLOAD tmp, 3C\nOUTPUT tmp, 3\nCALL waitLCD\nLOAD tmp, 0C\nOUTPUT tmp, 3\nCALL waitLCD\nLOAD tmp, 01\nOUTPUT tmp, 3\nRETURN\n\nsLCDC:\nCALL waitLCD\nOUTPUT lcdd, 3\nRETURN\n\nsLCDD:\nCALL waitLCD\nOUTPUT lcdd, 2\nRETURN\n\nwaitLCD:\nINPUT tmp, 2\nCOMPARE tmp, 0\nJUMP NZ, waitLCD\nRETURN\n\n\nwaitTmr:\nINPUT tmp, 3\nCOMPARE tmp, tmr\n;JUMP NZ, waitTmr\nRETURN\n\n; ======== Interrupt handler ==\ninthan:\n\nREGBANK B\nLOAD B_pscode, B_scode\nINPUT B_scode, 1\nCOMPARE B_scode, 0xF0\nJUMP Z, retie\nCALL iGetBtn\nCOMPARE B_tmp, 00\nJUMP Z, retie\nCOMPARE B_pscode, 0xF0\nJUMP Z, irelhan\nOR btns, B_tmp\nretsie: STAR btns, btns\nretie:returni e\n\nirelhan:\nXOR B_tmp, 0xFF\nAND btns, B_tmp\nJUMP retsie\n\niGetBtn:\nCOMPARE B_scode, 1D\nJUMP Z, ikW\nCOMPARE B_scode, 1B\nJUMP Z, ikS\nCOMPARE B_scode, 43\nJUMP Z, ikI\nCOMPARE B_scode, 42\nJUMP Z, ikK\nLOAD&RETURN B_tmp, 0\n\nikW: LOAD&RETURN B_tmp, 1\nikS: LOAD&RETURN B_tmp, 2\nikI: LOAD&RETURN B_tmp, 4\nikK: LOAD&RETURN B_tmp, 8\n; =============================\n\n\n; ======== Interrupt vector ===\naddress 3ff\njump inthan\n","lsrc":true,"debug":{"timescale":0.2,"brakepoints":[]},"sim":{"reg":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"breg":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"actRB":false,"dmem":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"stack":[],"PC":0,"ZF":false,"CF":false,"intEn":false,"intRq":false},"mods":[{"name":"LedMod","addr":["w0"],"opts":{"n":4},"state":{"leds":0}},{"name":"ParLCDMod","addr":["3","2"],"opts":{},"state":{"cram":[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],"dram":[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32],"AC":0,"ID":true,"SH":false,"shift":0,"DONOFF":false,"CONOFF":false,"BONOFF":false,"curaddr":false}},{"name":"KeyboardMod","addr":["1"],"opts":{},"state":{"capS":false,"capKD":true,"capKU":true,"eventq":[[0,"Default value"]],"asnd":true,"asdel":100,"repeat":false,"actVal":0},"enInt":true},{"name":"SwitchMod","addr":["2"],"opts":{"n":1},"state":{"switches":0}},{"name":"SwitchMod","addr":["3"],"opts":{"n":8},"state":{"switches":0}}]}